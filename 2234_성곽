bfs

===========================

import java.util.*;

class Main {
	private static Scanner scan;
	static int N;
	static int M;
	static int max;
	static int[][] group;
	static Node[][] map;
	static int[] dx = { 0, -1, 0, 1 };
	static int[] dy = { -1, 0, 1, 0 };
	static int gidx;
	static ArrayList<Node> list;

	public static void main(String[] args) {
		scan = new Scanner(System.in);
		N = scan.nextInt();
		M = scan.nextInt();
		gidx = 0;
		group = new int[M][N];
		map = new Node[M][N];
		max = Integer.MIN_VALUE;
		list = new ArrayList<Node>();

		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				int[] arr = new int[4];
				int a = scan.nextInt();

				for (int idx = 0; idx < 3; idx++) {
					int b = a / 2;
					int c = a % 2;
					arr[idx] = c;

					a = b;
					if (idx == 2) {
						arr[idx + 1] = b;
					}
				}

				map[i][j] = new Node(i, j);

				for (int idx = 0; idx < 4; idx++) {
					if (arr[idx] == 1) {
						map[i][j].wall[idx] = true;

						if ((i == 0 && idx == 1) || (i == M - 1 && idx == 3) || (j == 0 && idx == 0)
								|| (j == N - 1 && idx == 2)) {

						} else {
							list.add(new Node(i, j, idx));
						}
					}
				}
			}
		}

		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				if (group[i][j] == 0) {
					gidx++;
					bfs(map[i][j]);
				}
			}
		}

		System.out.println(gidx);
		System.out.println(max);

		gidx = 0;
		max = Integer.MIN_VALUE;

		for (int z = 0; z < list.size(); z++) {
			group = new int[M][N];
			Node temp = list.get(z);
			map[temp.x][temp.y].wall[temp.loc] = false;
			gidx++;
			bfs(map[temp.x][temp.y]);
			map[temp.x][temp.y].wall[temp.loc] = true;
		}
		System.out.println(max);
	}

	static void bfs(Node start) {
		int cnt = 1;
		Queue<Node> q = new LinkedList<Node>();
		q.add(start);
		group[start.x][start.y] = gidx;

		while (!q.isEmpty()) {
			Node node = q.poll();

			for (int k = 0; k < 4; k++) {
				int x = node.x + dx[k];
				int y = node.y + dy[k];

				if (x >= 0 && y >= 0 && x < M && y < N && !node.wall[k] && group[x][y] == 0) {
					group[x][y] = gidx;
					q.add(map[x][y]);
					cnt++;
				}
			}
		}
		if (cnt > max)
			max = cnt;
	}
}

class Node {
	int x;
	int y;
	int loc;

	boolean[] wall = new boolean[4];

	Node(int x, int y) {
		this.x = x;
		this.y = y;
	}

	Node(int x, int y, int loc) {
		this.x = x;
		this.y = y;
		this.loc = loc;
	}
}
