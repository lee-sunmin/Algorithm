45min

bfs

=====================================


import java.util.*;

public class Main {
	static int T;
	static int N;
	static int M;
	static int R;
	static int C;
	static int L;
	static int[][] map;
	static boolean[][] visit;
	// 상하좌우.
	static int[] dx = { -1, 1, 0, 0 };
	static int[] dy = { 0, 0, -1, 1 };
	static int[][] ternnel = { {}, { 1, 1, 1, 1 }, { 1, 1, 0, 0 }, { 0, 0, 1, 1 }, { 1, 0, 0, 1 }, { 0, 1, 0, 1 },
			{ 0, 1, 1, 0 }, { 1, 0, 1, 0 } };

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		T = scan.nextInt();

		for (int t = 0; t < T; t++) {
			N = scan.nextInt();
			M = scan.nextInt();
			R = scan.nextInt();
			C = scan.nextInt();
			L = scan.nextInt();

			map = new int[N][M];
			visit = new boolean[N][M];
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					map[i][j] = scan.nextInt();
				}
			}
			System.out.println("#" + (t + 1) + " " + (solution() + 1));
		}

	}

	public static int solution() {
		int res = 0;
		int time = 0;

		Queue<Node> q = new LinkedList<Node>();
		q.add(new Node(R, C));
		visit[R][C] = true;

		while (!q.isEmpty()) {
			int size = q.size();

			time++;
			if (time > L - 1) {
				// print(visit);
				return res;
			}

			while (size > 0) {

				Node temp = q.poll();
				int x = temp.x;
				int y = temp.y;

				int a = map[x][y];
				int[] ar = ternnel[a];

				for (int i = 0; i < 4; i++) {
					if (ar[i] == 1) {
						int tx = x + dx[i];
						int ty = y + dy[i];

						if (tx >= 0 && ty >= 0 && tx < N && ty < M) {
							int b = map[tx][ty];
							if (b != 0 && !visit[tx][ty]) {
								int[] br = ternnel[b];
								if (i == 0 || i == 2) {
									if (br[i + 1] == 1) {
										// true
										visit[tx][ty] = true;
										res++;
										q.add(new Node(tx, ty));
									}
								} else if (i == 1 || i == 3) {
									if (br[i - 1] == 1) {
										// true
										visit[tx][ty] = true;
										res++;
										q.add(new Node(tx, ty));
									}
								}
							}
						}
					}
				}
				size--;
			}
		}

		return res;
	}

	public static void print(boolean[][] board) {
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[0].length; j++) {
				System.out.print(board[i][j] + " ");
			}
			System.out.println();
		}
		System.out.println();
	}
}

class Node {
	int x;
	int y;

	Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}
