/*
* 백준 알고리즘 15684 사다리 조작 문제
* 재귀, 완전탐색
* 긴 시간동안 고통받았던 문제.. 풀고 나니 재귀 이해력 상승 :)
* 이 문제만 해결하면 대부분의 재귀 문제가 쉽게 풀린다.
*/

=======================================2020 풀이
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Queue;
import java.util.Scanner;

public class Main {

	static int N;
	static int M;
	static int H;
	static int[][] map;
	static int res;
	static int k;

	public static void main(String[] args) throws IOException {
		Scanner scan = new Scanner(System.in);

		N = scan.nextInt();
		M = scan.nextInt();
		H = scan.nextInt();

		map = new int[H + 1][N + 1];

		for (int i = 0; i < M; i++) {
			int x = scan.nextInt();
			int y = scan.nextInt();
			map[x][y] = y + 1;
			map[x][y + 1] = y;
		}

		res = 0;

		if (check()) {
			System.out.println(res);
			return;
		}

		k = 1;
		for (int i = 1; i <= H - 1; i++) {
			for (int j = 1; j <= N - 1; j++) {
				while (k <= 3) {
					dfs(k, i, j);
					k++;
					if (res != 0) {
						System.out.println(res);
						return;
					}
				}
			}
		}

		System.out.println(-1);
	}

	public static void dfs(int cnt, int x, int y) {
		if (cnt == 0) {
			if (check()) {
				res = k;
				return;
			}
		} else {
			int i = x;
			for (int j = y; j <= N - 1; j++) {
				for (; i <= H; i++) {
					if (map[i][j] == 0 && map[i][j + 1] == 0) {
						map[i][j] = j + 1;
						map[i][j + 1] = j;
						dfs(cnt - 1, i, j);
						map[i][j] = 0;
						map[i][j + 1] = 0;
					}
				}
				i = 1;
			}
		}
	}

	public static boolean check() {

		for (int i = 1; i <= N; i++) {
			int x = 1;
			int y = i;

			while (x <= H) {
				if (map[x][y] != 0) {
					y = map[x][y];
				}
				x++;
			}

			if (y != i)
				return false;
		}

		return true;
	}
}

class Node {
	int x;
	int y;

	Node(int x, int y) {

		this.x = x;
		this.y = y;
	}
}




=======================================2019 풀이
import java.util.Scanner;

public class Main {
	static int xSize;
	static int ySize;
	static int lineCnt;
	static int[][] ladder;
	private static Scanner scan;
	static int result;

	public static void main(String[] args) {
		scan = new Scanner(System.in);
		ySize = scan.nextInt();
		lineCnt = scan.nextInt();
		xSize = scan.nextInt();
		ladder = new int[xSize + 2][ySize + 2];

		for (int i = 0; i < lineCnt; i++) {
			int x = scan.nextInt();
			int y = scan.nextInt();
			ladder[x][y] = y + 1;
			ladder[x][y + 1] = y;
		}
		result = -1;
		CountLine(1, 0);

		System.out.println(result);
	}

	static void CountLine(int xCoord, int cnt) {

		if (Check(ladder)) {
			if (result == -1)
				result = cnt;
			else if(result > cnt) {
				result = cnt;
			}
		} else if (cnt < 3) {
			for (int y = 1; y < ySize; y++) {
				for (int x = xCoord; x <= xSize; x++) {
					if (ladder[x][y] == 0 && ladder[x][y + 1] == 0) {
         					// 나를 시험에 들게했던 조건문...
           					if(ladder[x][y - 1] != y){
							ladder[x][y + 1] = y;
							ladder[x][y] = y + 1;
							CountLine(x, cnt + 1);
							ladder[x][y] = 0;
							ladder[x][y + 1] = 0;
						}
					}
				}
			}
		}
	}

	static boolean Check(int[][] ladder) {
		int loc;
		for (int y = 1; y <= ySize; y++) {
			loc = y;
			for (int x = 1; x <= xSize; x++) {
				if (ladder[x][loc] != 0) {
					loc = ladder[x][loc];
				}
			}
			if (loc != y) {
				return false;
			}
		}
		return true;
	}
}


==================

이해하고 다시 풀어봤음.

시간, 메모리 줄었다 =)

import java.util.*;

public class Main {
	static int[][] map;
	static int N;
	static int M;
	static int H;
	static boolean res;

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		N = scan.nextInt();
		M = scan.nextInt();
		H = scan.nextInt();

		map = new int[H + 1][N + 1];

		for (int i = 0; i < M; i++) {
			int s = scan.nextInt();
			int e = scan.nextInt();
			map[s][e] = e + 1;
			map[s][e + 1] = e;
		}

		if (check()) {
			System.out.println(0);
			return;
		}

		for (int k = 0; k <= 3; k++) {
			dfs(1, 1, k);
			if (res) {
				System.out.println(k);
				return;
			}
		}

		System.out.println(-1);
	}

	public static void dfs(int x, int y, int cnt) {
		if (res)
			return;

		if (cnt > 0) {
			for (int i = x; i <= H; i++) {
				for (int j = y; j < N; j++) {
					if (map[i][j] == 0 && map[i][j + 1] == 0) {
						map[i][j] = j + 1;
						map[i][j + 1] = j;

						dfs(i, j + 1, cnt - 1);

						map[i][j] = 0;
						map[i][j + 1] = 0;
					}
				}
				y = 1;
			}
		} else if (cnt == 0) {
			if (check()) {
				res = true;
				return;
			}
		}
	}

	public static boolean check() {
		for (int j = 1; j <= N; j++) {
			int start = j;
			for (int i = 1; i <= H; i++) {
				if (map[i][start] != 0) {
					start = map[i][start];
				}
			}
			if (start != j) {
				return false;
			}
		}
		return true;
	}
}
