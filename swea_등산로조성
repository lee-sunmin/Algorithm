dfs
전체탐색

* point : 산을 깎기 전! 기준으로 최대 값에서 출발한다.


================================
import java.util.*;

// swea 등산로 조성.

public class Solution {
	static Scanner scan;
	static int LOOP;
	static int N;
	static int K;
	static int result;
	static int map[][];
	static int[] dx = { -1, 1, 0, 0 };
	static int[] dy = { 0, 0, -1, 1 };

	public static void main(String[] args) {
		scan = new Scanner(System.in);
		LOOP = scan.nextInt();

		for (int l = 1; l <= LOOP; l++) {
			N = scan.nextInt();
			K = scan.nextInt();
			map = new int[N][N];
			result = 0;
			// 로직 start.
			// 입력
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					map[i][j] = scan.nextInt();
				}
			}

			// 하나씩 깎고 dfs 돌기
			for (int a = 0; a <= K; a++) {
				for (int i = 0; i < N; i++) {
					for (int j = 0; j < N; j++) {
						ArrayList<Node> temp = searchHigh();
						map[i][j] = map[i][j] - a;
						// search High
						
						for (int k = 0; k < temp.size(); k++) {
							dfs(temp.get(k).x, temp.get(k).y, 1);
						}
						map[i][j] = map[i][j] + a;
					}
				}
			}

			System.out.println("#" + l + " " + result);
		}
	}

	public static ArrayList<Node> searchHigh() {
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (map[i][j] > max)
					max = map[i][j];
			}
		}

		ArrayList<Node> temp = new ArrayList<Node>();
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (map[i][j] == max)
					temp.add(new Node(i, j));
			}
		}
		return temp;
	}

	public static void dfs(int x, int y, int res) {
		if (result < res)
			result = res;
		
		for (int k = 0; k < 4; k++) {
			int kx = x + dx[k];
			int ky = y + dy[k];

			if (kx >= 0 && ky >= 0 && kx < N && ky < N) {
				if (map[kx][ky] < map[x][y]) {
					dfs(kx, ky, res + 1);
				} else {
					// out
				}
			}
		}
//		if (result < res)
//			result = res;
	}
}

class Node {
	int x;
	int y;

	Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}
