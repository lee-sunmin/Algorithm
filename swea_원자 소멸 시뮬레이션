충격과 공포의 문제.
메모리 초과, 시간초과
point : 선언과 초기화는 다르다.

=============================

import java.util.*;

public class Main {
	static int[][] map;
	static int[] dx = { 0, 0, -1, 1 };
	static int[] dy = { 1, -1, 0, 0 };
	static int N;
	static int T;

	static int result;

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);

		T = scan.nextInt();
		map = new int[4001][4001];

		for (int t = 1; t <= T; t++) {
			result = 0;

			N = scan.nextInt();
			LinkedList<Node> list = new LinkedList<Node>();

			for (int n = 0; n < N; n++) {
				int x = (scan.nextInt() + 1000) * 2;
				int y = (scan.nextInt() + 1000) * 2;
				int loc = scan.nextInt();
				int power = scan.nextInt();

				map[x][y] = 1;
				list.add(new Node(x, y, loc, power));
			}
			run(list);

			System.out.println("#" + t + " " + result);
		}
	}

	static void run(LinkedList<Node> list) {
		Queue<Node> q = new LinkedList<Node>();
		q.addAll(list);

		while (!q.isEmpty()) {
			int size = q.size();
			while (size > 0) {
				Node temp = q.poll();

				if (map[temp.x][temp.y] > 1) {
					result += temp.power;
					map[temp.x][temp.y] = 0;
					size--;
					continue;
				}

				int x = temp.x + dx[temp.loc];
				int y = temp.y + dy[temp.loc];

				if (x >= 0 && y >= 0 && x < 4001 && y < 4001) {
					map[temp.x][temp.y] = 0;
					map[x][y]++;

					if (map[x][y] > 1) {
						result += temp.power;
					} else {
						q.add(new Node(x, y, temp.loc, temp.power));
					}
				} else {
					// 무 시.
					map[temp.x][temp.y] = 0;
				}
				size--;
			}
		}
	}
}

class Node {
	int x;
	int y;
	int loc;
	int power;

	Node(int x, int y) {
		this.x = x;
		this.y = y;
	}

	Node(int x, int y, int loc, int power) {
		this.x = x;
		this.y = y;
		this.loc = loc;
		this.power = power;
	}
}
