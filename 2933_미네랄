
다소 복잡한 시뮬레이션 ;)

bfs를 사용하여 그룹이 어떻게 형성되어 있는지 확인한다.

문제가 된 부분은, 떠 있는 그룹을 그대로 내리는 방식이었다.
1 1
0 1
1

위와 같이 사이에 0이 있는 경우를 고려하여 같이 내려야 한다.

아래와 같이 구현했다.
1)그룹 1에 해당하는 모든 값 ‘.’ 과 0 으로 바꾸며 ArrayList에 저장
2)ArrayList를 돌며 모든 값들이 1칸씩 내려올 수 있는지 확인.
3)내려올 수 있다면 cnt++;
4)마지막에 ArrayList를 돌며 cnt만큼 내려준다.


=======================================

import java.util.*;

class Main {
	private static Scanner scan;
	static int R;
	static int C;
	static int N;
	static char[][] map;
	static int[][] group;
	static int result;
	static int[] dx = { -1, 1, 0, 0 };
	static int[] dy = { 0, 0, -1, 1 };
	static int gidx;
	static boolean[] floor;

	public static void main(String[] args) {
		scan = new Scanner(System.in);
		R = scan.nextInt();
		C = scan.nextInt();
		map = new char[R][C];
		group = new int[R][C];
		floor = new boolean[(R * C) + 1];

		scan.nextLine();
		for (int i = 0; i < R; i++) {
			String line = scan.nextLine();
			for (int j = 0; j < C; j++) {
				map[i][j] = line.charAt(j);
			}
		}

		N = scan.nextInt();
		int dir = -1;
		for (int n = 0; n < N; n++) {
			int a = scan.nextInt();
			dir = dir * -1;
			run(a, dir);
		}
		print(map);
	}

	static void check() {
		group = new int[R][C];
		gidx = 1;
		floor = new boolean[(R * C) + 1];

		for (int i = 0; i < R; i++) {
			for (int j = 0; j < C; j++) {
				if (group[i][j] == 0 && map[i][j] == 'x') {
					Queue<Node> q = new LinkedList<Node>();
					q.add(new Node(i, j));
					group[i][j] = gidx;
					while (!q.isEmpty()) {
						Node node = q.poll();

						for (int k = 0; k < 4; k++) {
							int x = node.x + dx[k];
							int y = node.y + dy[k];
							if (x >= 0 && y >= 0 && x < R && y < C && map[x][y] == 'x' && group[x][y] == 0) {
								group[x][y] = gidx;
								q.add(new Node(x, y));

								if (x == R - 1) {
									floor[gidx] = true;
								}
							}
						}
					}
					gidx++;
				}
			}
		}
	}

	static void run(int a, int dir) {
		if (dir == 1) {
			int x = R - a;
			for (int y = 0; y < C; y++) {
				if (map[x][y] == 'x') {
					map[x][y] = '.';
					group[x][y] = 0;
					break;
				}
			}
		} else {
			int x = R - a;
			for (int y = C - 1; y >= 0; y--) {
				if (map[x][y] == 'x') {
					map[x][y] = '.';
					group[x][y] = 0;
					break;
				}
			}
		}

		// group화, 붕 떠있는지 여부 검사함.
		check();

		// 누가 붕 떠있는 gidx인지 알아냄.
		int idx = -1;
		for (int z = 1; z < gidx; z++) {
			if (!floor[z]) {
				idx = z;
				break;
			}
		}

		if (idx != -1) {
			ArrayList<Node> list = new ArrayList<Node>();
			// 붕 떠있는 gidx모두 '.'으로 바꾸기
			for (int i = 0; i < R; i++) {
				for (int j = 0; j < C; j++) {
					if (group[i][j] == idx) {
						list.add(new Node(i, j));
						map[i][j] = '.';
						group[i][j] = 0;
					}
				}
			}

			// 붕 떠있는애들 끌어내리기.
			int cnt = 0;
			while (down(list, cnt)) {
				cnt++;
			}

			for (int i = 0; i < list.size(); i++) {
				Node temp = list.get(i);
				map[temp.x + cnt][temp.y] = 'x';
				group[temp.x + cnt][temp.y] = idx;
			}
		}
	}

	static boolean down(ArrayList<Node> list, int cnt) {
		for (int i = 0; i < list.size(); i++) {
			Node temp = list.get(i);
			if (temp.x + cnt + 1 >= R) {
				return false;
			} else if (map[temp.x + cnt + 1][temp.y] != '.') {
				return false;
			}
		}
		return true;
	}

	static void print(char[][] group) {
		for (int i = 0; i < R; i++) {
			for (int j = 0; j < C; j++) {
				System.out.print(group[i][j]);
			}
			System.out.println();
		}
		System.out.println();
	}
}

class Node {
	int x;
	int y;

	Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}
