/*
* 백준 알고리즘 14502 연구소
* 4분면 탐색, 재귀 
*/

import java.util.Scanner;

public class Main {
	static int xSize;
	static int ySize;
	static int lineCnt;
	static int[][] map;
	static boolean[][] visit;
	static int dx[] = { -1, 0, 1, 0 };
	static int dy[] = { 0, 1, 0, -1 };
	static Scanner scan;
	static int result;

	public static void main(String[] args) {
		scan = new Scanner(System.in);
		xSize = scan.nextInt();
		ySize = scan.nextInt();
		map = new int[xSize][ySize];
		visit = new boolean[xSize][ySize];
		for (int x = 0; x < xSize; x++) {
			for (int y = 0; y < ySize; y++) {
				map[x][y] = scan.nextInt();
			}
		}
		result = 0;

		DrawMap(0, 0);

		System.out.println(result);
	}

	static void DrawMap(int xCoord, int cnt) {
		if (cnt < 3) {
			for (int y = 0; y < ySize; y++) {
				for (int x = xCoord; x < xSize; x++) {
					if (map[x][y] == 0) {
						map[x][y] = 1;
						DrawMap(x, cnt + 1);
						map[x][y] = 0;
					}
				}
			}
		} else {
			int[][] Cmap = new int[xSize][ySize];
			boolean[][] Cvisit = new boolean[xSize][ySize];

			for (int x = 0; x < xSize; x++) {
				for (int y = 0; y < ySize; y++) {
					Cmap[x][y] = map[x][y];
					Cvisit[x][y] = visit[x][y];
				}
			}
			Check(Cmap, Cvisit);
		}
	}

	static void Check(int[][] map, boolean[][] visit) {
		int[][] res = new int[xSize][ySize];
		for (int x = 0; x < xSize; x++) {
			for (int y = 0; y < ySize; y++) {
				if (map[x][y] == 2) {
					// 바이러스 퍼뜨리는 작업.
					res = DrawVirusMap(x, y, map, visit);
				}
			}
		}
		int count = 0;
		for (int x = 0; x < xSize; x++) {
			for (int y = 0; y < ySize; y++) {
				if (res[x][y] == 0) {
					count++;
				}
			}
		}
		if (count > result) {
			result = count;
		}
	}

	static int[][] DrawVirusMap(int x, int y, int[][] map, boolean[][] visit) {
		if (map[x][y] == 1) {

		} else if (!visit[x][y]) {
			visit[x][y] = true;
			map[x][y] = 2;
			for (int z = 0; z < 4; z++) {
				int xCoord = x + dx[z];
				int yCoord = y + dy[z];
				if (xCoord >= 0 && xCoord < xSize && yCoord >= 0 && yCoord < ySize) {
					DrawVirusMap(xCoord, yCoord, map, visit);
				}
			}
		}
		return map;
	}
}


====
약간 다른 풀이 (Queue 사용)

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int N;
	static int M;
	static int[][] map;
	static int[][] tempmap;
	static ArrayList<Node> virus;
	static int[] dx = { -1, 1, 0, 0 };
	static int[] dy = { 0, 0, -1, 1 };
	static int result;

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		N = scan.nextInt();
		M = scan.nextInt();
		map = new int[N][M];
		tempmap = new int[N][M];
		virus = new ArrayList<Node>();
		result = Integer.MIN_VALUE;

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				map[i][j] = scan.nextInt();
				tempmap[i][j] = map[i][j];
				if (map[i][j] == 2) {
					virus.add(new Node(i, j));
				}
			}
		}

		dfs(0, 0, 3);
		System.out.println(result);

	}

	static void check() {
		Queue<Node> q = new LinkedList<Node>();

		q.addAll(virus);

		while (!q.isEmpty()) {
			Node temp = q.poll();

			for (int k = 0; k < 4; k++) {
				int x = temp.x + dx[k];
				int y = temp.y + dy[k];

				if (x >= 0 && y >= 0 && x < N && y < M && map[x][y] == 0) {
					map[x][y] = 2;
					q.add(new Node(x, y));
				}
			}
		}
//		print();

		int cnt = 0;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (map[i][j] == 0) {
					cnt++;
				}
			}
		}

		if (cnt > result)
			result = cnt;
	}

	static void print() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				System.out.print(map[i][j] + " ");
			}
			System.out.println();
		}
		System.out.println();
	}

	static void dfs(int x, int y, int cnt) {
		if (cnt == 0) {
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					tempmap[i][j] = map[i][j];
				}
			}
//			print();
			check();
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					map[i][j] = tempmap[i][j];
				}
			}
		} else {
			for (int i = x; i < N; i++) {
				for (int j = y; j < M; j++) {
					if (map[i][j] == 0) {
						map[i][j] = 1;
						dfs(i, j + 1, cnt - 1);
						map[i][j] = 0;
					}
				}
				y = 0;
			}

		}
	}
}

class Node {
	int x;
	int y;

	Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}
