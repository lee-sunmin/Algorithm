/*
* 백준 알고리즘 14502 연구소
* 4분면 탐색, 재귀 
*/

import java.util.Scanner;

public class Main {
	static int xSize;
	static int ySize;
	static int lineCnt;
	static int[][] map;
	static boolean[][] visit;
	static int dx[] = { -1, 0, 1, 0 };
	static int dy[] = { 0, 1, 0, -1 };
	static Scanner scan;
	static int result;

	public static void main(String[] args) {
		scan = new Scanner(System.in);
		xSize = scan.nextInt();
		ySize = scan.nextInt();
		map = new int[xSize][ySize];
		visit = new boolean[xSize][ySize];
		for (int x = 0; x < xSize; x++) {
			for (int y = 0; y < ySize; y++) {
				map[x][y] = scan.nextInt();
			}
		}
		result = 0;

		DrawMap(0, 0);

		System.out.println(result);
	}

	static void DrawMap(int xCoord, int cnt) {
		if (cnt < 3) {
			for (int y = 0; y < ySize; y++) {
				for (int x = xCoord; x < xSize; x++) {
					if (map[x][y] == 0) {
						map[x][y] = 1;
						DrawMap(x, cnt + 1);
						map[x][y] = 0;
					}
				}
			}
		} else {
			int[][] Cmap = new int[xSize][ySize];
			boolean[][] Cvisit = new boolean[xSize][ySize];

			for (int x = 0; x < xSize; x++) {
				for (int y = 0; y < ySize; y++) {
					Cmap[x][y] = map[x][y];
					Cvisit[x][y] = visit[x][y];
				}
			}
			Check(Cmap, Cvisit);
		}
	}

	static void Check(int[][] map, boolean[][] visit) {
		int[][] res = new int[xSize][ySize];
		for (int x = 0; x < xSize; x++) {
			for (int y = 0; y < ySize; y++) {
				if (map[x][y] == 2) {
					// 바이러스 퍼뜨리는 작업.
					res = DrawVirusMap(x, y, map, visit);
				}
			}
		}
		int count = 0;
		for (int x = 0; x < xSize; x++) {
			for (int y = 0; y < ySize; y++) {
				if (res[x][y] == 0) {
					count++;
				}
			}
		}
		if (count > result) {
			result = count;
		}
	}

	static int[][] DrawVirusMap(int x, int y, int[][] map, boolean[][] visit) {
		if (map[x][y] == 1) {

		} else if (!visit[x][y]) {
			visit[x][y] = true;
			map[x][y] = 2;
			for (int z = 0; z < 4; z++) {
				int xCoord = x + dx[z];
				int yCoord = y + dy[z];
				if (xCoord >= 0 && xCoord < xSize && yCoord >= 0 && yCoord < ySize) {
					DrawVirusMap(xCoord, yCoord, map, visit);
				}
			}
		}
		return map;
	}
}
