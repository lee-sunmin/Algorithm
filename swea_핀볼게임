
시뮬레이션
50분 :)

==========================================

import java.util.*;

class Main {
	private static Scanner scan;
	static int T;
	static int N;
	static Node[] hole;
	static int[][] map;
	static int[] dx = { 1, 0, -1, 0 };
	static int[] dy = { 0, -1, 0, 1 };
	static int[][] block = { {}, { 3, 2, 0, 1 }, { 2, 0, 3, 1 }, { 2, 3, 1, 0 }, { 1, 3, 0, 2 }, { 2, 3, 0, 1 } };
	static int[] wall = { 2, 3, 0, 1 };
	static int result;
	static Node start;

	public static void main(String[] args) {
		scan = new Scanner(System.in);

		T = scan.nextInt();

		for (int t = 0; t < T; t++) {
			N = scan.nextInt();
			hole = new Node[11];
			result = 0;

			map = new int[N][N];
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					map[i][j] = scan.nextInt();

					if (map[i][j] >= 6 && map[i][j] <= 10) {
						if (hole[map[i][j]] == null) {
							hole[map[i][j]] = new Node(map[i][j], i, j);
						} else {
							hole[map[i][j]].x2 = i;
							hole[map[i][j]].y2 = j;
						}
					}
				}
			}

			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (map[i][j] == 0) {
						for (int k = 0; k < 4; k++) {
							if (i + dx[k] >= 0 && i + dy[k] >= 0 && i + dx[k] < N && i + dy[k] < N) {
								start = new Node(i, j);
								run(i, j, k);
							}
						}
					}
				}
			}
			System.out.println("#"+(t+1)+" "+result);
		}
	}

	static void run(int i, int j, int dir) {
		int cnt = 0;
		int x = i + dx[dir];
		int y = j + dy[dir];

		while (x != start.x || y != start.y) {
			if (x >= 0 && y >= 0 && x < N && y < N) {
				if (map[x][y] == -1) {
					break;
				} else if (map[x][y] == 0) {
					// 빈공간. 직진.
				} else if (map[x][y] >= 1 && map[x][y] <= 5) {
					// block
					int idx = map[x][y];
					dir = block[idx][dir];
					cnt++;
				} else if (map[x][y] >= 6 && map[x][y] <= 10) {
					Node temp = hole[map[x][y]].getPair(x, y);
					x = temp.x;
					y = temp.y;
				}
			} else {
				dir = wall[dir];
				cnt++;
			}

			x = x + dx[dir];
			y = y + dy[dir];
		}

		if (cnt > result)
			result = cnt;
	}
}

class Node {
	int x;
	int y;

	int x1;
	int y1;
	int x2;
	int y2;
	int idx;

	Node(int idx, int x1, int y1) {
		this.x1 = x1;
		this.y1 = y1;
	}

	Node(int x, int y) {
		this.x = x;
		this.y = y;
	}

	Node getPair(int x, int y) {
		if (x == x1 && y == y1) {
			return new Node(x2, y2);
		} else {
			return new Node(x1, y1);
		}
	}
}
