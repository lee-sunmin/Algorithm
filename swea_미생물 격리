삽질
1) 상하 이동에서 x좌표가 상-> 증가, 하 -> 감소 인줄 알고 풀었음
뒤늦게 상 -> 감소인걸 확인하고 수정.

2) 조건 등호 잘 보기

3) max값 정리 잘해주기

시뮬레이션
======================

import java.util.*;

class Solution {
	private static Scanner scan;
	static int T;
	static int N;
	static int M;
	static int K;
	static ArrayList<Node>[][] map2;
	static int[] dx = { 0, -1, 1, 0, 0 };
	static int[] dy = { 0, 0, 0, -1, 1 };
	static int result;

	public static void main(String[] args) {

		scan = new Scanner(System.in);
		T = scan.nextInt();

		for (int t = 0; t < T; t++) {
			N = scan.nextInt();
			M = scan.nextInt();
			K = scan.nextInt();
			map2 = new ArrayList[N][N];
			result = 0;

			for (int k = 0; k < K; k++) {
				int x = scan.nextInt();
				int y = scan.nextInt();
				int val = scan.nextInt();
				int dir = scan.nextInt();

				map2[x][y] = new ArrayList<Node>();
				map2[x][y].add(new Node(val, dir));
			}

			// start
			solve(M);

			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (map2[i][j] == null || map2[i][j].size() == 0) {
						continue;
					}
					if (map2[i][j].size() > 1) {
						System.out.println("w");
					}
					result = result + map2[i][j].get(0).val;
				}
			}
			System.out.println("#" + (t + 1) + " " + result);
		}
	}

	static void solve(int M) {
		int year = 1;

		while (year <= M) {

			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					int x = i;
					int y = j;

					if (map2[i][j] == null || map2[i][j].size() == 0) {
						continue;
					}

					Iterator<Node> iter = map2[i][j].iterator();
					while (iter.hasNext()) {

						Node node = iter.next();

						if (node.year == year) {
							continue;
						}
						x = x + dx[node.dir];
						y = y + dy[node.dir];

						if (x < 0 || y < 0 || x >= N || y >= N) {
							continue;
						}

						if (map2[x][y] == null) {
							map2[x][y] = new ArrayList<Node>();
						}
						node.year = year;

						// 가장자리 걸렸을 때.
						if (x == 0 || x == N - 1 || y == 0 || y == N - 1) {
							// 미생물의 절반이 죽고.
							node.val = (node.val / 2);
							node.max = node.val;

							// 이동방향이 반대로 바뀐다.
							if (node.dir == 1 || node.dir == 3)
								node.dir++;
							else
								node.dir--;

							if (node.val == 0) {

							} else {
								node.max = node.val;
								map2[x][y].add(node);
							}
						} else if (map2[x][y].size() > 0) { // 한군데에 모임.
							boolean isAdd = true;
							for (int b = 0; b < map2[x][y].size(); b++) {
								Node temp = map2[x][y].get(b);
								if (temp.year == year) {
									if (temp.max == 0 || temp.max > temp.val) {
										if (temp.val > node.val) {
											temp.max = temp.val;
										} else {
											temp.max = node.val;
											temp.dir = node.dir;
										}
									} else {
										if (temp.max < node.val) {
											// dir, max update
											temp.dir = node.dir;
											temp.max = node.val;
										} else {
											temp.max = temp.val;
										}
									}
									isAdd = false;
									temp.val = temp.val + node.val;
								}
							}
							if (isAdd) {
								node.max = node.val;
								map2[x][y].add(node);
							}
						} else { // 평범.
							node.max = node.val;
							map2[x][y].add(node);
						}
						iter.remove();
					}
				}
			}
			year++;
		}
	}
}

class Node {
	int year = 0;
	int sum;
	int max;
	int val = -1;
	int dir;

	Node(int val, int dir) {
		this.val = val;
		this.dir = dir;
	}

}
