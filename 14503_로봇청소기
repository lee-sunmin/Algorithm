백준 알고리즘 14503번 로봇청소기

시뮬레이션 문제
방문한 장소는 -1로 바꿔가며 진행한다.
dx, dy 사용하여 네방향 확인. 동서남북 순서로 정했다.
==================================

import java.util.Scanner;

class Main {
	static int[][] board;
	static int answer;
	private static Scanner scan;
	static int[] dx = { 0, 0, 1, -1 };
	static int[] dy = { 1, -1, 0, 0 };

	public static void main(String[] args) {
		scan = new Scanner(System.in);
		int rowSize = scan.nextInt();
		int colSize = scan.nextInt();

		board = new int[rowSize][colSize];

		int x = scan.nextInt();
		int y = scan.nextInt();
		int dir = scan.nextInt();

		for (int i = 0; i < rowSize; i++) {
			for (int j = 0; j < colSize; j++) {
				board[i][j] = scan.nextInt();
			}
		}

		solution(board, x, y, dir);
		System.out.println(answer);
	}

	public static void solution(int[][] board, int x, int y, int dir) {
		if (board[x][y] == 0) {
			board[x][y] = -1;
			answer++;
		}
		boolean isblock = true;
		for (int i = 0; i < 4; i++) {
			int xx = x + dx[i];
			int yy = y + dy[i];

			if (xx >= 0 && xx < board.length && yy >= 0 && yy < board[0].length && board[xx][yy] == 0)
				isblock = false;
		}
		if (dir == 0) { // 북
			if (isblock) {
				// 뒤로 한 칸 갈 수 있는지 확인.
				int xx = x + dx[2];
				int yy = y + dy[2];
				if (xx < board.length - 1 && board[xx][yy] != 1) {
					solution(board, xx, yy, dir);
				} else if (board[xx][yy] == 1) {
					return;
				}
			} else if (board[x][y - 1] == 0) {
				solution(board, x, y - 1, 3);
			} else {
				solution(board, x, y, 3);
			}
		} else if (dir == 1) {
			if (isblock) {
				int xx = x + dx[1];
				int yy = y + dy[1];
				if (xx < board.length - 1 && board[xx][yy] != 1) {
					solution(board, xx, yy, dir);
				} else if (board[xx][yy] == 1) {
					return;
				}
			} else if (board[x - 1][y] == 0) {
				solution(board, x - 1, y, 0);
			} else {
				solution(board, x, y, 0);
			}
		} else if (dir == 2) {
			if (isblock) {
				int xx = x + dx[3];
				int yy = y + dy[3];
				if (xx < board.length - 1 && board[xx][yy] != 1) {
					solution(board, xx, yy, dir);
				} else if (board[xx][yy] == 1) {
					return;
				}
			} else if (board[x][y + 1] == 0) {
				solution(board, x, y + 1, 1);
			} else {
				solution(board, x, y, 1);
			}
		} else {
			if (isblock) {
				int xx = x + dx[0];
				int yy = y + dy[0];
				if (xx < board.length - 1 && board[xx][yy] != 1) {
					solution(board, xx, yy, dir);
				} else if (board[xx][yy] == 1) {
					return;
				}
			} else if (board[x + 1][y] == 0) {
				solution(board, x + 1, y, 2);
			} else {
				solution(board, x, y, 2);
			}
		}
	}
}
