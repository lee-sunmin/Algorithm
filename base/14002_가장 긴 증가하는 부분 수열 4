다이나믹 프로그래밍 기본

** 대부분의 알고리즘에서 추적을 위해 v 배열을 사용한다. -> 어떤 값이 왜 바뀌었는지를 전부 기록해서 역추적
(링크 타고 가는 것 처럼 이전 장소를 저장하는 개념)
배열로 링크드리스트? 만들었을때 느낌이랑 비슷하다 ㅎㅎ 

============================
역추적 하는 부분을 재귀로도 구현 할 수 있다.

void go(int p)

if(v[p] == 0) return;

go(v[p]);
print(map[p]);

============================

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;
import java.util.Stack;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
		Scanner scan = new Scanner(System.in);
		int n = scan.nextInt();
		int[] map = new int[n + 1];
		int[] d = new int[n + 1];
		int[] v = new int[n + 1];

		for (int i = 1; i <= n; i++) {
			map[i] = scan.nextInt();
			d[i] = 1;
		}

		for (int i = 2; i <= n; i++) {
			for (int j = i - 1; j >= 0; j--) {
				if (map[i] > map[j] && d[i] <= d[j]) {
					d[i] = d[j] + 1;
					v[i] = j;
				}
			}
		}

		int result = 1;
		int m = 1;
		for (int i = 1; i <= n; i++) {
			if (result < d[i]) {
				result = d[i];
				m = i;
			}
		}

		Stack<Integer> stack = new Stack<Integer>();
		while (v[m] != 0) {
			stack.add(map[m]);
			m = v[m];
		}
		stack.add(map[m]);

		System.out.println(result);
		while (!stack.isEmpty()) {
			System.out.print(stack.pop() + " ");
		}
	}
}
