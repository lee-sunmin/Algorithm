2019 카카오 무지의 먹방라이브 효율성
유일하게 아직도 해결하지 못했다.
효율성 1, 2, 4, 7 Fail
Long 타입 연산에 주의하면 된다는데 신경써서 해도 안됨

코멘트 달아주시면 정말 감사합니다 :)

참고한 블로그 : http://ithub.tistory.com/34     <감사합니다>

=====================================================


	public static int solution(int[] food_times, long k) {
		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
		long sum = 0L;

		for (int i = 0; i < food_times.length; i++) {
			map.put(i, food_times[i]);
			sum = sum + (long) (food_times[i]);
		}

		if (sum <= k)
			return -1;

		Iterator<Integer> it = sortByValue(map).iterator();// value값 오름차순
		int mapSize = map.size();
		int before = 0;
		while (it.hasNext()) {
			int temp = it.next();
			int getTemp = map.get(temp);
			long a = (long) (getTemp - before) * (long) mapSize;
			if (a <= k) {
				before = getTemp;
				map.remove(temp);
				mapSize = map.size();
				k = k - a;
			} else {
				break;
			}
		}

		Iterator<Integer> iteratorKey = map.keySet().iterator(); // key값 오름차순(정상으로 돌림)
		int res = 0;
		int cnt = 0;

		while (iteratorKey.hasNext()) {
			if ((long) cnt <= (k % (long) mapSize)) {
				res = iteratorKey.next();
				cnt++;
			} else
				break;
		}

		return res + 1;
	}

	public static List<Integer> sortByValue(Map<Integer, Integer> map) {
		List<Integer> list = new ArrayList<Integer>();
		list.addAll(map.keySet());
		Collections.sort(list, new Comparator<Object>() {

			public int compare(Object o1, Object o2) {
				Object v1 = map.get(o1);
				Object v2 = map.get(o2);
				return ((Comparable<Object>) v1).compareTo(v2);
			}
		});
		return list;
	}
