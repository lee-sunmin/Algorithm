/*
* 유일성을 위한 Bit연산 적용 완료
* 처음으로 접한 비트문제
* 지저분한 코드는 다듬어야 함
* 비트 연산에 대해 참고했던 블로그 주소 ~ 감사합니다 :) 
* http://meylady.tistory.com/22
*/

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

class Solution {
    int answer = 0;
    int colSize = 0;
    ArrayList<ArrayList<Integer>> superKey;

    public int solution(String[][] relation) {
        colSize = relation[0].length;
		ArrayList<Integer> colArr = new ArrayList<Integer>();
        superKey = new ArrayList<ArrayList<Integer>>();

		findKey(0, colArr,relation,superKey);
        answer = checkMinimum(superKey);
        return answer;
    }
    
    	public void findKey(int col, ArrayList<Integer> colArr, String[][] relation, ArrayList<ArrayList<Integer>> superKey) {
            int colSize = relation[0].length;
		for (int idx = col; idx <= colSize; idx++) {
			if (idx < colSize) {
				colArr.add(idx);
				if (checkUnique(colArr, relation)) {
					ArrayList<Integer> temp = new ArrayList<Integer>();
					temp = (ArrayList<Integer>) colArr.clone();
					superKey.add(temp);
				}
				findKey(idx + 1, colArr, relation,superKey);
				colArr.remove((Integer) idx);
			}
		}
	}
    
    public int checkMinimum(ArrayList<ArrayList<Integer>> superKey) {
        int result = 0;
		HashSet<Integer> bitArr = new HashSet<>();

		for (int idx = 0; idx < superKey.size(); idx++) {
			int num = 0;
			for (int bitidx = 0; bitidx < superKey.get(idx).size(); bitidx++) {
				num |= (1 << superKey.get(idx).get(bitidx).intValue());
			}
			bitArr.add(num);
		}

		Iterator<Integer> it; // Iterator(반복자) 생성
		int smaller;
		while (bitArr.size() > 0) {
			it = bitArr.iterator(); // Iterator(반복자) 생성
			smaller = it.next();
			while (it.hasNext()) { // hasNext() : 데이터가 있으면 true 없으면 false
				int next = it.next();
				int temp = smaller & next;
				if (temp == smaller) {
					it.remove();
				}
			}
			result++;
			bitArr.remove(smaller);
		}
        return result;
	}

	public boolean checkUnique(ArrayList<Integer> colArr,String[][] relation) {
		ArrayList<String> sumInput = new ArrayList<String>();
		for (int rowidx = 0; rowidx < relation.length; rowidx++) {
			String temp = "";
			for (int idx = 0; idx < colArr.size(); idx++) {
				temp += relation[rowidx][colArr.get(idx)];
			}
			if (sumInput.contains(temp)) {
				return false;
			} else {
				sumInput.add(temp);
			}
		}
		return true;
	}
}
