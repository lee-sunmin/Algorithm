
백준알고리즘

BFS 인생문제 - Queue
이 문제 풀고 BFS 감 잡을 수 있었음 :)

마지막 visit [][] = true 
잘못 써서 시간초과 발생 했었음.
==================================

import java.util.*;

public class Main {
	static Node minNode;
	static Node sharkNode;

	static int[] dx = { 1, 0, -1, 0 };
	static int[] dy = { 0, -1, 0, 1 };
	static int[][] map;
	static boolean[][] visit;
	static int N;
	static int shark;
	static int total;
	static int result;

	static Queue<Node> queue;

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		N = scan.nextInt();
		map = new int[N][N];
		visit = new boolean[N][N];
		queue = new LinkedList<Node>();

		shark = 2;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				map[i][j] = scan.nextInt();
				if (map[i][j] == 9) {
					sharkNode = new Node(i, j, 0);
				}
			}
		}

		while (search()) {
			result += minNode.cnt;
			total++;
			map[sharkNode.x][sharkNode.y] = 0;
			sharkNode.x = minNode.x;
			sharkNode.y = minNode.y;

			if (total == shark) {
				shark++;
				total = 0;
			}
			map[sharkNode.x][sharkNode.y] = 9;
		}
		System.out.println(result);
	}

	public static boolean search() {

		queue.add(sharkNode);
		minNode = new Node();
		visit = new boolean[N][N];

		boolean state = false;
		while (!queue.isEmpty()) {
			Node temp = queue.poll();
			int x = temp.x;
			int y = temp.y;
			int cnt = temp.cnt;

			// this line can save the time
			if (minNode.cnt != -1 && minNode.cnt < cnt) {
				queue.clear();
				continue;
			}

			visit[x][y] = true;
			for (int i = 0; i < 4; i++) {
				int tx = x + dx[i];
				int ty = y + dy[i];
				if (tx >= 0 && ty >= 0 && tx < N && ty < N) {
					if (map[tx][ty] <= shark && map[tx][ty] != 9 && !visit[tx][ty]) {
						// If remove this line, run the time out
						visit[tx][ty] = true;
						queue.add(new Node(tx, ty, cnt + 1));

						if (map[tx][ty] < shark && map[tx][ty] != 0) {
							if (minNode.cnt == -1) {
								minNode = new Node(tx, ty, cnt + 1);
							} else if ((minNode.x > tx || (minNode.x == tx && minNode.y > ty))
									&& minNode.cnt >= cnt + 1) {
								minNode = new Node(tx, ty, cnt + 1);

							}
							state = true;
						}
					}
				}
			}
		}
		return state;
	}
}

class Node {
	int x;
	int y;
	int cnt;

	Node() {
		this.x = -1;
		this.y = -1;
		this.cnt = -1;
	}

	Node(int x, int y, int cnt) {
		this.x = x;
		this.y = y;
		this.cnt = cnt;
	}
}



=========================
두 번째 풀어도 헷갈렸다.
Result 해주는 부분에서 잘못 생각해서 약간 헤맸음
이전과는 다르게 check 해주는 함수를 추가 했는데, 아주 쪼오끔 시간 줄었음 

import java.util.*;

class Main {
	private static Scanner scan;
	static int N;
	static int[][] map;
	static boolean[][] visit;
	static int result;
	static int res1;
	static Node shark;
	static int fishCnt;
	static int sharkSize;
	static int[] dx = { -1, 0, 0, 1 };
	static int[] dy = { 0, -1, 1, 0 };

	public static void main(String[] args) {
		scan = new Scanner(System.in);
		N = scan.nextInt();
		map = new int[N][N];
		visit = new boolean[N][N];
		fishCnt = 0;
		sharkSize = 2;
		result = 0;

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				map[i][j] = scan.nextInt();
				if (map[i][j] == 9)
					shark = new Node(i, j);
			}
		}

		while (!check()) {
			visit = new boolean[N][N];
			Node res = bfs();
			if (res.x == -1 && res.y == -1) {
				System.out.println(result);
				return;
			}
			result += res1;
			res1 = 0;
			map[shark.x][shark.y] = 0;
			shark = new Node(res.x, res.y);
			map[res.x][res.y] = 9;

			fishCnt++;
			if (fishCnt % sharkSize == 0) {
				sharkSize++;
				fishCnt = 0;
			}
		}
		System.out.println(result);
	}

	static boolean check() {
		boolean brk = true;

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (map[i][j] != 0 && map[i][j] != 9 && map[i][j] < sharkSize) {
					brk = false;
				}
			}
		}

		return brk;
	}

	static Node bfs() {
		Queue<Node> q = new LinkedList<Node>();
		q.add(shark);
		visit[shark.x][shark.y] = true;
		Node res = new Node(-1, -1);

		while (!q.isEmpty()) {
			int size = q.size();

			while (size > 0) {
				Node temp = q.poll();

				for (int k = 0; k < 4; k++) {
					int x = temp.x + dx[k];
					int y = temp.y + dy[k];

					if (x >= 0 && y >= 0 && x < N && y < N && !visit[x][y]) {
						if (map[x][y] == 0 || map[x][y] == sharkSize) {
							q.add(new Node(x, y));
							visit[x][y] = true;
						} else if (map[x][y] > sharkSize) {

						} else if (map[x][y] < sharkSize) {
							if (res.x != -1 && res.y != -1) {
								if (res.x > x) {
									res = new Node(x, y);
								} else if (res.x == x && res.y > y) {
									res = new Node(x, y);
								}
							} else {
								res = new Node(x, y);
							}
						}
					}
				}
				size--;
			}
			res1++;
			if (res.x != -1 && res.y != -1)
				return res;
		}
		return res;
	}

}

class Node {
	int x;
	int y;

	Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

