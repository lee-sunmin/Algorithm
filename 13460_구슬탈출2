1. 구슬을 queue에 넣을 때, 방향은 넣지 않고 구슬을 끝까지 굴린 후에 그 위치만 넣는다
2. 파란, 빨간 구슬의 위치 신경쓰지 말고 끝까지 이동시킨 다음에 이동한 거리를 사용하여 순서 바꾼다.
3. 4차원 배열을 사용한다(2가지 구슬의 x,y 좌표)
4. x>=0등 하지 않아도 된다. 왜냐면 끝이 모두 #로 감싸져있기 때문이다.
5. result 값을 정확하게 올리기 위해 while문 2개를 사용한다. 처음 queue에 있던 갯수 기준으로 돌린 이후 ++1
6. 함수의 결과 return이 아닌 상황에 맞게 print 후 return(break가 아닌 함수 종료)


bfs+시뮬레이션
구슬 이동시켜서 넣는게 너무 어려웠음


========================

import java.util.*;

//구슬탈출2
public class Main {
	static Scanner scan;
	static int N;
	static int M;
	static int result;
	static int map[][];
	static Node node;
	static boolean visit[][][][];
	static int[] dx = { -1, 1, 0, 0 };
	static int[] dy = { 0, 0, -1, 1 };

	public static void main(String[] args) {
		scan = new Scanner(System.in);

		N = scan.nextInt();
		M = scan.nextInt();
		map = new int[N][M];
		visit = new boolean[N][M][N][M];
		node = new Node();
		// 입력
		scan.nextLine();
		for (int i = 0; i < N; i++) {
			String line = scan.nextLine();
			for (int j = 0; j < line.length(); j++) {
				map[i][j] = line.charAt(j);
				if (map[i][j] == 'R') {
					node.setRed(i, j);
				} else if (map[i][j] == 'B') {
					node.setBlue(i, j);
				}
			}
		}
		solve();
	}

	public static void solve() {
		Queue<Node> q = new LinkedList<Node>();
		q.add(node);
		visit[node.rx][node.ry][node.bx][node.by] = true;

		while (q.size() > 0) {
			int size = q.size();
			while (size > 0) {
				Node temp = q.poll();
				size = size - 1;

				if (temp == null)
					break;

				if (map[temp.rx][temp.ry] == 'O' && map[temp.rx][temp.ry] != map[temp.bx][temp.by]) {
					System.out.println(result);
					return;
				}

				for (int k = 0; k < 4; k++) {
					int x = temp.rx;
					int y = temp.ry;
					int bx = temp.bx;
					int by = temp.by;

					// 회전
					while (map[x + dx[k]][y + dy[k]] != '#' && map[x][y] != 'O') {
						x = x + dx[k];
						y = y + dy[k];
					}

					while (map[bx + dx[k]][by + dy[k]] != '#' && map[bx][by] != 'O') {
						bx = bx + dx[k];
						by = by + dy[k];
					}

					if (x == bx && y == by) {
						if (map[x][y] == 'O') {
							continue;
						} else if (((Math.abs(x - temp.rx) + Math.abs(y - temp.ry))) < (Math.abs(bx - temp.bx)
								+ Math.abs(by - temp.by))) {
							bx = bx - dx[k];
							by = by - dy[k];
						} else {
							x = x - dx[k];
							y = y - dy[k];
						}
					}

					if (!visit[x][y][bx][by]) {
						q.add(new Node(x, y, bx, by));
						visit[x][y][bx][by] = true;
					}
				}
			}
			result++;
			if (result > 10) {
				System.out.println("-1");
				return;
			}
			
		}
		System.out.println("-1");
		return;
	}
}

class Node {
	int rx;
	int ry;
	int bx;
	int by;

	Node() {

	}

	Node(int rx, int ry, int bx, int by) {
		this.rx = rx;
		this.ry = ry;
		this.bx = bx;
		this.by = by;
	}

	void setRed(int rx, int ry) {
		this.rx = rx;
		this.ry = ry;
	}

	void setBlue(int bx, int by) {
		this.bx = bx;
		this.by = by;
	}
}
